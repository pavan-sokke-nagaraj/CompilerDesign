[INFO][SYNTAX]prog
[INFO][SYNTAX]classDeclList progBody
[INFO][SYNTAX]ClassDecl classDeclList progBody
[INFO][SYNTAX]class id { varDecFunDef } ; classDeclList progBody
[INFO][SYNTAX]class Foo { varDecFunDef } ; classDeclList progBody
[INFO][SYNTAX]class Foo { type id var_DecFunDef1 } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int id var_DecFunDef1 } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1 var_DecFunDef1 } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1 arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; type id var_DecFunDef1  } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float id var_DecFunDef1  } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2 var_DecFunDef1  } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2 arraySizeList ; varDecFunDef   } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; varDecFunDef   } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; type id var_DecFunDef1   } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int id var_DecFunDef1   } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3 var_DecFunDef1   } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3 arraySizeList ; varDecFunDef    } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3 array_Size arraySizeList ; varDecFunDef    } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ T_INTEGER ]  arraySizeList ; varDecFunDef    } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]  arraySizeList ; varDecFunDef    } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; varDecFunDef    } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; type id var_DecFunDef1    } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float id var_DecFunDef1    } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4 var_DecFunDef1    } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4 arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4 array_Size arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ T_INTEGER ]  arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]  arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]  array_Size arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ T_INTEGER ]  arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]  arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]  array_Size arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ T_INTEGER ]  arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]  arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]  array_Size arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ T_INTEGER ]  arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]  arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]  array_Size arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ T_INTEGER ]  arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]  arraySizeList ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; varDecFunDef     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; type id var_DecFunDef1     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils id var_DecFunDef1     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils var_DecFunDef1     } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils arraySizeList ; varDecFunDef      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; varDecFunDef      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; type id var_DecFunDef1      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int id var_DecFunDef1      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax var_DecFunDef1      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( fParams ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( type id arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int id arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1 arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  f_Param_Tail f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , type id arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float id arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2 arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  f_Param_Tail f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , type id arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int id arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a array_Size arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ T_INTEGER ]  arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]  arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   f_Param_Tail f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , type id arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float id arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b array_Size arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ T_INTEGER ]  arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]  arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]  array_Size arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ T_INTEGER ]  arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]  arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   f_Param_Tail f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , type id arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo id arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  f_Param_Tail f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , type id arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo id arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo array_Size arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ T_INTEGER ]  arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]  arraySizeList f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]   f_Params_TailList ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) funcBody ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int id arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int id arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float id arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float id arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int id arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int id arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c array_Size arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ T_INTEGER ]  arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]  arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float id arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float id arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d array_Size arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ T_INTEGER ]  arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]  arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; id body_Code2 } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility body_Code2 } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility id arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility arraySizeList ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; bodyCode } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; ctrlStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( variable ) ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( id i_ndiceList dotNest ) ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value i_ndiceList dotNest ) ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value  dotNest ) ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; ctrlStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( variable ) ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( id i_ndiceList dotNest ) ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val i_ndiceList dotNest ) ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  dotNest ) ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . id i_ndiceList dotNest ) ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val i_ndiceList dotNest ) ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val  dotNest ) ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = num terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10 terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10  arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10   subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]   terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]    arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]     subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = num terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10 terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10  arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10   subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]   terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]    arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]     subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]   terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]    arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]     subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]   terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]    arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]     subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = sign factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = sign factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a indice i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ arithExpr ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ term arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a IorP terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  I_F terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a IorP terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a  terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a   arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]  I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]   terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]    arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]   terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]    arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]     subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = sign factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = sign factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a indice i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ arithExpr ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ term arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ num terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10 terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10  arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a indice i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ arithExpr ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ term arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ num terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10 terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10  arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]  I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]   terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]    arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]   terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]    arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]     subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]   terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]    arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]     subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]   terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]    arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]     subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = sign factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = sign factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a indice i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ arithExpr ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ term arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a IorP terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  I_F terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a IorP terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a  terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a   arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]  I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]   terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]    arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]   terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]    arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]     subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = sign factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a  terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a   arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a    subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; assignStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; variable = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a i_ndiceList dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a  dotNest = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = expr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = arithExpr subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = term arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = sign factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + factor terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a IorP terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a indice i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ arithExpr ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ term arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ num terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10 terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10  arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a indice i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ arithExpr ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ term arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ num terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10 terFac arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10  arithERR ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ] i_ndiceList I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]  I_F terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]   terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]    arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]   terFac arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]    arithERR subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]     subExpr ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; ctrlStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( expr ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( arithExpr subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( term arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( factor terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( id IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a  terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a   arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    relOp arithExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arithExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > term arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > factor terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > id IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr indice i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ arithExpr ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ term arithERR ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa IorP terFac arithERR ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa  terFac arithERR ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa   arithERR ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]  I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]   terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]    arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then statBlock else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { statement S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { assignStat ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { variable = expr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { id i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a  dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = expr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arithExpr subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = term arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = factor terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = id IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx  terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx   arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]  I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]   terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]    arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]     subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ; S_LIST } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; ctrlStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( type id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = arithExpr subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = term arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = factor terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = num terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1 terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1  arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1   subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; arithExpr relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; term arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; factor terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; id IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2 IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2  terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2   arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= term arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= factor terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= num terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99 terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99  arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; variable = expr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; id i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3 i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3  dotNest = expr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = expr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = arithExpr subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = factor terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( arithExpr ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( term arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( factor terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( id IorP terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx IorP terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx  terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx   arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  addOp term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + factor terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + num terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1 terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1  arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1   subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; statement S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; ctrlStat ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( type id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = arithExpr subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = term arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = factor terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = num terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1 terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1  arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1   subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; arithExpr relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; term arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; factor terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; id IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2 IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2  terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2   arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= term arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= factor terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= num terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99 terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99  arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; assignStat ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; variable = expr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; id i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3 i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3  dotNest = expr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = expr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = arithExpr subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = factor terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( arithExpr ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( term arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( factor terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( id IorP terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx IorP terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx  terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx   arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  addOp term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + factor terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + num terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1 terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1  arithERR subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1   subExpr ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) statBlock ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { statement S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { assignStat ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { variable = expr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { id i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a indice i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]  dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = expr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = arithExpr subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = term arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = factor terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = id IorP terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b IorP terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]  I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]   terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]    arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]     subExpr ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; statement S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; ctrlStat ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( expr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( arithExpr subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( term arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( factor terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( id IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array indice i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx  terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx   arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]  I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]   terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]    arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     relOp arithExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < arithExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < term arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < factor terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < id IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue  terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue   arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { statement S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { assignStat ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { variable = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { id i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue  dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = arithExpr subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = term arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = factor terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = id IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx  terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx   arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]  I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]   terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]    arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]     subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else statBlock ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { S_LIST } ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; statement S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; ctrlStat ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( expr ) ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( arithExpr subExpr ) ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( term arithERR subExpr ) ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( factor terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( id IorP terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue IorP terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue  terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue   arithERR subExpr ) ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue    subExpr ) ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ; S_LIST } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ; S_LIST } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ; funcDefList      } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  progBody
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program funcBody ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1 arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2 arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3 arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3 array_Size arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ T_INTEGER ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4 arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4 array_Size arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ T_INTEGER ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]  array_Size arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ T_INTEGER ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]  array_Size arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ T_INTEGER ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]  array_Size arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ T_INTEGER ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]  array_Size arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ T_INTEGER ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; id body_Code2 } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility body_Code2 } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; ctrlStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( expr ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( arithExpr subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( term arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( factor terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( id IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a  terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a   arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    subExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    relOp arithExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arithExpr ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > term arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > factor terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > id IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr indice i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ arithExpr ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ term arithERR ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa IorP terFac arithERR ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa  terFac arithERR ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa   arithERR ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ] i_ndiceList I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]  I_F terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]   terFac arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]    arithERR ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then statBlock else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { statement S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { assignStat ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { variable = expr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { id i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a  dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = expr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arithExpr subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = term arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = factor terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = id IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx  terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx   arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]  I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]   terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]    arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]     subExpr ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ; S_LIST } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { statement S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { ctrlStat ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( type id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = arithExpr subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = term arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = factor terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = num terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1 terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1  arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1   subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; arithExpr relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; term arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; factor terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; id IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2 IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2  terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2   arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= term arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= factor terFac arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= num terFac arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99 terFac arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99  arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; variable = expr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; id i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3 i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3  dotNest = expr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = expr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = arithExpr subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = term arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = factor terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( arithExpr ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( term arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( factor terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( id IorP terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx IorP terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx  terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx   arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  addOp term arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + term arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + factor terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + num terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1 terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1  arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1   subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; statement S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; ctrlStat ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( type id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = arithExpr subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = term arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = factor terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = num terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1 terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1  arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1   subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; arithExpr relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; term arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; factor terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; id IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2 IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2  terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2   arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= term arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= factor terFac arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= num terFac arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99 terFac arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99  arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; variable = expr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; id i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3 i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3  dotNest = expr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = expr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = arithExpr subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = term arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = factor terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( arithExpr ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( term arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( factor terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( id IorP terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx IorP terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx  terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx   arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  addOp term arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + term arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + factor terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + num terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1 terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1  arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1   subExpr ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { statement S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { assignStat ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { variable = expr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { id i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a indice i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]  dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = expr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = arithExpr subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = term arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = factor terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = id IorP terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b IorP terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]  I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]   terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]    arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]     subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; statement S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; ctrlStat ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( expr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( arithExpr subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( term arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( factor terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( id IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array indice i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx  terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx   arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]  I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]   terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]    arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     relOp arithExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < arithExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < term arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < factor terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < id IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue  terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue   arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { statement S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { assignStat ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { variable = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { id i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue  dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = arithExpr subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = term arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = factor terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = id IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx  terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx   arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]  I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]   terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]    arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]     subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; statement S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; ctrlStat ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( expr ) ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( arithExpr subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( term arithERR subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( factor terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( id IorP terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue IorP terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue  terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue   arithERR subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue    subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; func_Def funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; funcHead funcBody ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; type id ( fParams ) funcBody ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float id ( fParams ) funcBody ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive ( fParams ) funcBody ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) funcBody ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; id body_Code2 } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value body_Code2 } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value i_ndiceList dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value  dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = arithExpr subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = num terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 multOp factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( arithExpr ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( num terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2 terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  addOp term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + num terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 multOp factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / num terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006 terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006  arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )   subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; statement S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; assignStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; variable = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value  dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = arithExpr subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = num terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05 terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  addOp term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( arithExpr ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( arithExpr ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( term arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( factor terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( num terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 multOp factor terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * factor terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * num terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47 terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47  arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  addOp term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - num terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0 terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0  arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  addOp term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + num terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006 terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; statement S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; ctrlStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( expr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( arithExpr subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( term arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( factor terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( id IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value  terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value   arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value    subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; func_Def funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; funcHead funcBody ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; type id ( fParams ) funcBody ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float id ( fParams ) funcBody ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect ( fParams ) funcBody ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) funcBody ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; id body_Code2 } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value body_Code2 } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value i_ndiceList dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value  dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = arithExpr subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = num terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 multOp factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( arithExpr ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( num terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2 terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  addOp term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + num terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 multOp factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / num terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006 terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006  arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )   subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; statement S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; assignStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; variable = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value  dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = arithExpr subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = num terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05 terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  addOp term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( arithExpr ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( arithExpr ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( term arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( factor terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( num terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 multOp factor terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * factor terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * num terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47 terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47  arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  addOp term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - num terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0 terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0  arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  addOp term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + num terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006 terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; statement S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; ctrlStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( expr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( arithExpr subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( term arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( factor terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( id IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value  terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value   arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value    subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; statement S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; ctrlStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( type id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = arithExpr subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = term arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = factor terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = num terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1 terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1  arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1   subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; arithExpr relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; term arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; factor terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; id IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2 IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2  terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2   arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= term arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= factor terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= num terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99 terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99  arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; variable = expr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; id i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3 i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3  dotNest = expr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = expr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = arithExpr subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = factor terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( arithExpr ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( term arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( factor terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( id IorP terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx IorP terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx  terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx   arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    ) terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  addOp term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + factor terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + num terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1 terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1  arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1   subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { statement S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { assignStat ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { variable = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { id i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a indice i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]  dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = arithExpr subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = term arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = factor terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = id IorP terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b IorP terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]  I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]   terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]    arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]     subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; statement S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; ctrlStat ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( expr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( arithExpr subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( term arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( factor terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( id IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array indice i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx  terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx   arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]  I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]   terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]    arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     relOp arithExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < arithExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < term arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < factor terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < id IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue  terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue   arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { statement S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { assignStat ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { variable = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { id i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue  dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = arithExpr subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = term arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = factor terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = id IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx  terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx   arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]  I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]   terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]    arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]     subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else statBlock ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { statement S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { ctrlStat ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( type id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = arithExpr subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = term arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = factor terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = num terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1 terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1  arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1   subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; relExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; arithExpr relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; term arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; factor terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; id IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2 IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2  terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2   arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= arithExpr ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= term arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= factor terFac arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= num terFac arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99 terFac arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99  arithERR ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; assignStat ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; variable = expr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; id i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3 i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3  dotNest = expr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = expr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = arithExpr subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = term arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = factor terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( arithExpr ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( term arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( factor terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( id IorP terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx IorP terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx  terFac arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx   arithERR ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    ) terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  addOp term arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + term arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + factor terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + num terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1 terFac arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1  arithERR subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1   subExpr ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { statement S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { assignStat ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { variable = expr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { id i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a indice i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]  dotNest = expr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = expr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = arithExpr subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = term arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = factor terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = id IorP terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b IorP terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]  I_F terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]   terFac arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]    arithERR subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]     subExpr ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; statement S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; ctrlStat ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( expr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( arithExpr subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( term arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( factor terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( id IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array indice i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx  terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx   arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]  I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]   terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]    arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     relOp arithExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < arithExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < term arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < factor terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < id IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max  terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max   arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { statement S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { assignStat ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { variable = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { id i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max  dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = arithExpr subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = term arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = factor terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = id IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx  terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx   arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]  I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]   terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]    arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]     subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else statBlock ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else { S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; statement S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; ctrlStat ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( expr ) ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( arithExpr subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( term arithERR subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( factor terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( id IorP terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min IorP terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min  terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min   arithERR subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min    subExpr ) ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ; S_LIST } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ; S_LIST } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; statement S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; ctrlStat ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; return ( expr ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; return ( arithExpr subExpr ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; return ( term arithERR subExpr ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; return ( factor terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; return ( id IorP terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; return ( min IorP terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; return ( min  terFac arithERR subExpr ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; return ( min   arithERR subExpr ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; return ( min    subExpr ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; return ( min     ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; return ( min     ) ;  } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; return ( min     ) ;  } ;  } ; funcDefList
[INFO][SYNTAX]class Foo { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; Utils utils  ; int FindMax ( int f1  , float f2  , int a  [ 1 ]   , float b  [ 2 ]   [ 2 ]   , Foo foo  , Foo foo  [ 1 ]    ) { int a  ; float b  ; int c  [ 10 ]   ; float d  [ 20 ]   ; Utility utility  ; get ( value   ) ; get ( val  . val   ) ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; maxValue   = 10    ; maxValue   = minValue     ; maxValue   = minValue [ 100   ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = - a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; a  . a   = a     ; a [ 10   ]   = a     ; a [ 10   ] [ 20   ]   = a     ; a  . a [ 10   ]   = a     ; a  . a   = a  . a     ; a [ 10   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ]      ; a [ 10   ] [ 12   ]  . a [ 11   ]   = a [ 10   ]  . a [ 11   ] [ 11   ]      ; left   = not right     ; a   = + a     ; a   = - a [ a [ a  . a    ]     ]      ; a   = + a     ; a   = + a [ a  . a [ 10   ]  . a  . a [ 10   ]     ]      ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else {  } ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;       } ;  program { int var1  ; float var2  ; int var3  [ 10 ]   ; float var4  [ 2 ]   [ 3 ]   [ 4 ]   [ 6 ]   [ 7 ]   ; int findMax  ; Utility utility  ; if ( a    > arr [ aa    ]     ) then { a   = arr [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    )  ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else {  } ; return ( minValue     ) ;  } ;  } ;  } ; float retrive (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; float radomselect (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < maxValue    ) then { maxValue   = array [ valx    ]      ;  } else { for ( int valx1 = 1    ; valx2    <= 99   ; valx3   = ( valx    )  + 1    ) { a [ 1   ]   = b [ 1   ]      ; if ( array [ valx    ]     < max    ) then { max   = array [ valx    ]      ;  } else {  } ; return ( min     ) ;  } ;  } ; return ( min     ) ;  } ;  } ; 
