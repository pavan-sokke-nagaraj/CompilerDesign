[INFO][SYNTAX]prog
[INFO][SYNTAX]classDeclList progBody
[INFO][SYNTAX]ClassDecl classDeclList progBody
[INFO][SYNTAX]class id { varDecFunDef } ; classDeclList progBody
[INFO][SYNTAX]class Utility { varDecFunDef } ; classDeclList progBody
[INFO][SYNTAX]class Utility { type id var_DecFunDef1 } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int id var_DecFunDef1 } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1 var_DecFunDef1 } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1 arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1 array_Size arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ T_INTEGER ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]  array_Size arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ T_INTEGER ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]  array_Size arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ T_INTEGER ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]  array_Size arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ T_INTEGER ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]  array_Size arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ T_INTEGER ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]  array_Size arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ T_INTEGER ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]  array_Size arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ T_INTEGER ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; type id var_DecFunDef1  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float id var_DecFunDef1  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2 var_DecFunDef1  } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2 arraySizeList ; varDecFunDef   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; varDecFunDef   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; type id var_DecFunDef1   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int id var_DecFunDef1   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax var_DecFunDef1   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( fParams ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( type id arraySizeList f_Params_TailList ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int id arraySizeList f_Params_TailList ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array arraySizeList f_Params_TailList ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array array_Size arraySizeList f_Params_TailList ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ T_INTEGER ]  arraySizeList f_Params_TailList ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]  arraySizeList f_Params_TailList ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]   f_Params_TailList ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int id arraySizeList ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int id arraySizeList ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue arraySizeList ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int id arraySizeList ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int id arraySizeList ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx arraySizeList ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; id body_Code2 } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue body_Code2 } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue i_ndiceList dotList = expr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue  dotList = expr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = expr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = arithExpr subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = term arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array IorP terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]   terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]    arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]     subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; statement S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; ctrlStat ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( type id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = arithExpr subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = term arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = factor terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = num terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99 terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99  arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99   subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; arithExpr relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; term arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; factor terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; id IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1 IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1  terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1   arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > term arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > factor terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > num terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0 terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0  arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; variable = expr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; id i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1 i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1  dotNest = expr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = expr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = arithExpr subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = factor terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = id IorP terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx IorP terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx  terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   addOp term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - factor terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - num terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1 terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1  arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1   subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { statement S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { ctrlStat ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( expr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( arithExpr subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( term arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( factor terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( id IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array indice i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1 IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1  terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1   arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]  I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]   terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]    arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     relOp arithExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > arithExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > term arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > factor terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > id IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue  terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue   arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { statement S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { assignStat ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { variable = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { id i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue  dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = arithExpr subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = term arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = factor terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = id IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1 IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1  terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1   arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]  I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]   terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]    arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]     subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else { S_LIST } ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; statement S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; ctrlStat ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( expr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( arithExpr subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( term arithERR subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( factor terFac arithERR subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( id IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue  terFac arithERR subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue   arithERR subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue    subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; func_Def funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; funcHead funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; type id ( fParams ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int id ( fParams ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( fParams ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( type id arraySizeList f_Params_TailList ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int id arraySizeList f_Params_TailList ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array arraySizeList f_Params_TailList ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array array_Size arraySizeList f_Params_TailList ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ T_INTEGER ]  arraySizeList f_Params_TailList ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]  arraySizeList f_Params_TailList ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]   f_Params_TailList ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) funcBody ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int id arraySizeList ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int id arraySizeList ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue arraySizeList ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int id arraySizeList ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int id arraySizeList ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx arraySizeList ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; bodyCode } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; id body_Code2 } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue body_Code2 } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue i_ndiceList dotList = expr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue  dotList = expr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = expr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = arithExpr subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = term arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array IorP terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100  arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]   terFac arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]    arithERR subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]     subExpr ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; statement S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; ctrlStat ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( type id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = arithExpr subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = term arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = factor terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = num terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1 terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1  arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1   subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; arithExpr relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; term arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; factor terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; id IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1 IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1  terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1   arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= term arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= factor terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= num terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99 terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99  arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; assignStat ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; variable = expr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; id i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1 i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1  dotNest = expr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = expr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = arithExpr subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = factor terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = id IorP terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx IorP terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx  terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   addOp term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + factor terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + num terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1 terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1  arithERR subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1   subExpr ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) statBlock ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { statement S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { ctrlStat ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( expr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( arithExpr subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( term arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( factor terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( id IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array IorP terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array indice i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1 IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1  terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1   arithERR ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ] i_ndiceList I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]  I_F terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]   terFac arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]    arithERR subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     subExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     relOp arithExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < arithExpr ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < term arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < factor terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < id IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue IorP terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue  terFac arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue   arithERR ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then statBlock else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { statement S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { assignStat ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { variable = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { id i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue i_ndiceList dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue  dotNest = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = expr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = arithExpr subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = term arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = factor terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = id IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array IorP terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array indice i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1 IorP terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1  terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1   arithERR ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ] i_ndiceList I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]  I_F terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]   terFac arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]    arithERR subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]     subExpr ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ; S_LIST } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else statBlock ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else { S_LIST } ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ; S_LIST } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; statement S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; ctrlStat ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( expr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( arithExpr subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( term arithERR subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( factor terFac arithERR subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( id IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue  terFac arithERR subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue   arithERR subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue    subExpr ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ; S_LIST } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ; funcDefList   } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ; classDeclList progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  progBody
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program funcBody ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample array_Size arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ T_INTEGER ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; id body_Code2 } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility body_Code2 } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; id body_Code2 } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility body_Code2 } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility array_Size arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ T_INTEGER ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]  array_Size arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ T_INTEGER ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]  array_Size arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ T_INTEGER ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]  array_Size arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ T_INTEGER ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; ctrlStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( type id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int id = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = expr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = arithExpr subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = term arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = factor terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = num terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0 terFac arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0  arithERR subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0   subExpr ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; relExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; arithExpr relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; term arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; factor terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; id IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t IorP terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t  terFac arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t   arithERR relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    relOp arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= arithExpr ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= term arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= factor terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= num terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100 terFac arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100  arithERR ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; assignStat ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; variable = expr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; id i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t i_ndiceList dotNest = expr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t  dotNest = expr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = expr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = arithExpr subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = factor terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = id IorP terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t IorP terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t  terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   addOp term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + term arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + factor terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + num terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1 terFac arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1  arithERR subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1   subExpr ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) statBlock ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { statement S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { ctrlStat ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( variable ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( id i_ndiceList dotNest ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample i_ndiceList dotNest ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample indice i_ndiceList dotNest ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ arithExpr ] i_ndiceList dotNest ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ term arithERR ] i_ndiceList dotNest ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ factor terFac arithERR ] i_ndiceList dotNest ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ id IorP terFac arithERR ] i_ndiceList dotNest ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t IorP terFac arithERR ] i_ndiceList dotNest ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t  terFac arithERR ] i_ndiceList dotNest ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t   arithERR ] i_ndiceList dotNest ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ] i_ndiceList dotNest ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]  dotNest ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; statement S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; assignStat ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; variable = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; id i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample indice i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ id IorP terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t IorP terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t  terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t   arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ] i_ndiceList dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]  dotNest = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = expr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = arithExpr subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = term arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = factor terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( arithExpr ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( term arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( id IorP terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample IorP terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample i_ndiceList I_F terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample indice i_ndiceList I_F terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ arithExpr ] i_ndiceList I_F terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ term arithERR ] i_ndiceList I_F terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ id IorP terFac arithERR ] i_ndiceList I_F terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t IorP terFac arithERR ] i_ndiceList I_F terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t  terFac arithERR ] i_ndiceList I_F terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t   arithERR ] i_ndiceList I_F terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ] i_ndiceList I_F terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]  I_F terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   multOp factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * num terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10 terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10  arithERR ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   ) terFac arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )  arithERR subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )   subExpr ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ; S_LIST } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; statement S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; assignStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; variable = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue  dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = arithExpr subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility IorP terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax IorP terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( aParams ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( expr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( arithExpr subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( term arithERR subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( factor terFac arithERR subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( id IorP terFac arithERR subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample IorP terFac arithERR subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample  terFac arithERR subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample   arithERR subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample    subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample     aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )   subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; statement S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; assignStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; variable = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue  dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = arithExpr subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility IorP terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility i_ndiceList I_F terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  I_F terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . id IorP terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin IorP terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( aParams ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( expr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( arithExpr subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( term arithERR subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( factor terFac arithERR subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( id IorP terFac arithERR subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample IorP terFac arithERR subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample  terFac arithERR subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample   arithERR subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample    subExpr aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample     aPTailList ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )   subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; statement S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; assignStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; variable = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]  dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = arithExpr subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = num terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10 terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10   subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; statement S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; assignStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; variable = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] indice i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ arithExpr ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ term arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ factor terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ num terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0 terFac arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0  arithERR ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]  dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = arithExpr subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = num terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2 terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2   subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; statement S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; ctrlStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( expr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( arithExpr subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( term arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( factor terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( id IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue  terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue   arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue    subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; statement S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; ctrlStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( expr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( arithExpr subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( term arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( factor terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( id IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue  terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue   arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue    subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; func_Def funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; funcHead funcBody ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; type id ( fParams ) funcBody ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float id ( fParams ) funcBody ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize ( fParams ) funcBody ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) funcBody ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; id body_Code2 } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value body_Code2 } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value i_ndiceList dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value  dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = arithExpr subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = num terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 multOp factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( arithExpr ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( num terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2 terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  addOp term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + num terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 multOp factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / num terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006 terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006  arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )   subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; statement S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; assignStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; variable = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; id i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value i_ndiceList dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value  dotNest = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = arithExpr subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = num terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05 terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  addOp term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( arithExpr ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( arithExpr ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( term arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( factor terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( num terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 multOp factor terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * factor terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * num terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47 terFac arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47  arithERR ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   ) terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  addOp term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - term arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - factor terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - num terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0 terFac arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0  arithERR ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   ) terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  addOp term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + num terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006 terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006   subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; statement S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; ctrlStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( expr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( arithExpr subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( term arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( factor terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( id IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value  terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value   arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value    subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; funcDefList
[INFO][SYNTAX]class Utility { int var1  [ 4 ]   [ 5 ]   [ 7 ]   [ 8 ]   [ 9 ]   [ 1 ]   [ 0 ]   ; float var2  ; int findMax ( int array  [ 100 ]    ) { int maxValue  ; int varx  ; maxValue   = array [ 100   ]      ; for ( int varx1 = 99    ; varx1    > 0   ; varx1   = varx   - 1    ) { if ( array [ varx1    ]     > maxValue    ) then { maxValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( maxValue     ) ;  } ; int findMin ( int array  [ 100 ]    ) { int minValue  ; int varx  ; minValue   = array [ 100   ]      ; for ( int varx1 = 1    ; varx1    <= 99   ; varx1   = varx   + 1    ) { if ( array [ varx1    ]     < minValue    ) then { minValue   = array [ varx1    ]      ;  } else {  } ;  } ; return ( minValue     ) ;  } ;    } ;  program { int sample  [ 100 ]   ; int varx  ; int maxValue  ; int minValue  ; Utility utility  ; Utility arrayUtility  [ 2 ]   [ 3 ]   [ 6 ]   [ 7 ]   ; for ( int t = 0    ; t    <= 100   ; t   = t   + 1    ) { get ( sample [ t    ]   ) ; sample [ t    ]   = ( sample [ t    ]   * 10   )    ;  } ; maxValue   = utility  . findMax ( sample      )    ; minValue   = utility  . findMin ( sample      )    ; utility  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 10    ; arrayUtility [ 1   ] [ 1   ] [ 1   ] [ 1   ]  . var1 [ 4   ] [ 1   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ] [ 0   ]   = 2    ; put ( maxValue     ) ; put ( minValue     ) ;  } ; float randomize (  ) { float value  ; value   = 100 * ( 2  + 3.0 / 7.0006   )    ; value   = 1.05  + ( ( 2.04 * 2.47   )  - 3.0   )  + 7.0006    ; return ( value     ) ;  } ; 
