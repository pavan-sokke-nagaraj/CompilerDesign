[INFO][SYNTAX]prog
[INFO][SYNTAX]classDeclList progBody
[INFO][SYNTAX]ClassDecl classDeclList progBody
[INFO][SYNTAX]class id { varDecFunDef } ; classDeclList progBody
[INFO][SYNTAX]class Foo { varDecFunDef } ; classDeclList progBody
[INFO][SYNTAX]class Foo { type id var_DecFunDef1 } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int id var_DecFunDef1 } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int a var_DecFunDef1 } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int a arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int a array_Size arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int a  [ T_INTEGER ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int a  [ 10 ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int a  [ 10 ]  array_Size arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ T_INTEGER ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]  arraySizeList ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ; varDecFunDef  } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ; classDeclList progBody
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  progBody
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program funcBody ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { id body_Code2 } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo body_Code2 } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo id arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f array_Size arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ T_INTEGER ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]  arraySizeList ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; bodyCode } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; id body_Code2 } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f body_Code2 } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f i_ndiceList dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f indice i_ndiceList dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ arithExpr ] i_ndiceList dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ term arithERR ] i_ndiceList dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ factor terFac arithERR ] i_ndiceList dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ num terFac arithERR ] i_ndiceList dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1 terFac arithERR ] i_ndiceList dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1  arithERR ] i_ndiceList dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ] i_ndiceList dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  dotList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . id i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a indice i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ arithExpr ] i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ term arithERR ] i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ factor terFac arithERR ] i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ num terFac arithERR ] i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1 terFac arithERR ] i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1  arithERR ] i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] indice i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ arithExpr ] i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ term arithERR ] i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ factor terFac arithERR ] i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ num terFac arithERR ] i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1 terFac arithERR ] i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1  arithERR ] i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ] i_ndiceList = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = expr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = arithExpr subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = term arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = factor terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = num terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10 terFac arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10  arithERR subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10   subExpr ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; statement S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; ctrlStat ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( expr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( arithExpr subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( term arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( factor terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( id IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f indice i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1  arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . id IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a IorP terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a indice i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1  arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] indice i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] [ arithExpr ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] [ term arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] [ factor terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] [ num terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] [ 1 terFac arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] [ 1  arithERR ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] [ 1   ] i_ndiceList I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] [ 1   ]  I_F terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] [ 1   ]   terFac arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] [ 1   ]    arithERR subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] [ 1   ]     subExpr ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] [ 1   ]      ) ; S_LIST } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] [ 1   ]      ) ;  } ; funcDefList
[INFO][SYNTAX]class Foo { int a  [ 10 ]   [ 10 ]   ;   } ;  program { Foo f  [ 10 ]   ; f [ 1   ]  . a [ 1   ] [ 1   ]  = 10    ; put ( f [ 1   ]  . a [ 1   ] [ 1   ]      ) ;  } ; 
