[INFO][SYNTAX]T_RESERVE_WORD_CLASS -> class
[INFO][SYNTAX]T_IDENTIFIER -> Foo1
[INFO][SYNTAX]T_DEL_C_LPAREN -> {
[INFO][SYNTAX]varDecFunDef    -> EPSILON
[INFO][SYNTAX]T_DEL_C_RPAREN -> }
[INFO][SYNTAX]T_DEL_SEMICOLON -> ;
[INFO][SYNTAX]classDecl        -> class id { varDecFunDef } ;
[INFO][SYNTAX]classDeclList    -> EPSILON
[INFO][SYNTAX]classDeclList    -> classDecl classDeclList
[INFO][SYNTAX]T_IDENTIFIER -> program
[INFO][SYNTAX]T_DEL_C_LPAREN -> {
[INFO][SYNTAX]T_IDENTIFIER -> c
[INFO][SYNTAX]indiceList -> EPSILON
[INFO][SYNTAX]dotIdList -> EPSILON
[INFO][SYNTAX]T_OP_ASSIGN_EQUAL -> =
[INFO][SYNTAX]T_IDENTIFIER -> minA
[INFO][SYNTAX]T_DEL_R_LPAREN -> (
[INFO][SYNTAX]T_IDENTIFIER -> a
[INFO][SYNTAX]indiceOrParam -> EPSILON
[INFO][SYNTAX]factor -> id indiceOrParam
[INFO][SYNTAX]termFactor -> EPSILON
[INFO][SYNTAX]term -> factor termFactor
[INFO][SYNTAX]arithExprRight -> EPSILON
[INFO][SYNTAX]arithExpr -> term arithExprRight
[INFO][SYNTAX]subExpr -> EPSILON
[INFO][SYNTAX]expr -> arithExpr subExpr
[INFO][SYNTAX]T_DEL_COMMA -> ,
[INFO][SYNTAX]T_IDENTIFIER -> b
[INFO][SYNTAX]indiceOrParam -> EPSILON
[INFO][SYNTAX]factor -> id indiceOrParam
[INFO][SYNTAX]termFactor -> EPSILON
[INFO][SYNTAX]term -> factor termFactor
[INFO][SYNTAX]arithExprRight -> EPSILON
[INFO][SYNTAX]arithExpr -> term arithExprRight
[INFO][SYNTAX]subExpr -> EPSILON
[INFO][SYNTAX]expr -> arithExpr subExpr
[INFO][SYNTAX]aParamsTail -> , expr
[INFO][SYNTAX]aParamsTailList -> EPSILON
[INFO][SYNTAX]aParamsTailList -> aParamsTail aParamsTailList
[INFO][SYNTAX]aParams -> expr aParamsTailList
[INFO][SYNTAX]T_DEL_R_RPAREN -> )
[INFO][SYNTAX]indiceOrParam -> ( aParams )
[INFO][SYNTAX]factor -> id indiceOrParam
[INFO][SYNTAX]termFactor -> EPSILON
[INFO][SYNTAX]term -> factor termFactor
[INFO][SYNTAX]arithExprRight -> EPSILON
[INFO][SYNTAX]arithExpr -> term arithExprRight
[INFO][SYNTAX]subExpr -> EPSILON
[INFO][SYNTAX]expr -> arithExpr subExpr
[INFO][SYNTAX]T_DEL_SEMICOLON -> ;
[INFO][SYNTAX]statementList -> EPSILON
[INFO][SYNTAX]bodyCode2 -> indiceList dotIdList assignOp expr ; statementList
[INFO][SYNTAX]bodyCode -> id bodyCode2
[INFO][SYNTAX]T_DEL_C_RPAREN -> }
[INFO][SYNTAX]funcBody -> { bodyCode }
[INFO][SYNTAX]T_DEL_SEMICOLON -> ;
[INFO][SYNTAX]funcDefList -> EPSILON
[INFO][SYNTAX]progBody -> program funcBody ; funcDefList
[INFO][SYNTAX]prog -> classDeclList progBody
