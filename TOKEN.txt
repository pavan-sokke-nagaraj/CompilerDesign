[
LINE:	1	VALUE:	if		TOKEN:	T_RESERVE_WORD, 
LINE:	1	VALUE:	then		TOKEN:	T_RESERVE_WORD, 
LINE:	1	VALUE:	else		TOKEN:	T_RESERVE_WORD, 
LINE:	1	VALUE:	for		TOKEN:	T_RESERVE_WORD, 
LINE:	1	VALUE:	class		TOKEN:	T_RESERVE_WORD, 
LINE:	1	VALUE:	int		TOKEN:	T_RESERVE_WORD, 
LINE:	1	VALUE:	float		TOKEN:	T_RESERVE_WORD, 
LINE:	1	VALUE:	get		TOKEN:	T_RESERVE_WORD, 
LINE:	1	VALUE:	put		TOKEN:	T_RESERVE_WORD, 
LINE:	1	VALUE:	return		TOKEN:	T_RESERVE_WORD, 
LINE:	2	VALUE:	=		TOKEN:	T_OP_ASSIGN_EQUAL, 
LINE:	2	VALUE:	==		TOKEN:	T_OP_REL_EQUAL, 
LINE:	2	VALUE:	<>		TOKEN:	T_OP_REL_EQUAL, 
LINE:	2	VALUE:	<		TOKEN:	T_OP_REL_LESSTHAN, 
LINE:	2	VALUE:	<=		TOKEN:	T_OP_REL_LESSTHAN_EQUAL, 
LINE:	2	VALUE:	>		TOKEN:	T_OP_REL_GREATERTHAN, 
LINE:	2	VALUE:	>=		TOKEN:	T_OP_REL_GREATERTHAN_EQUAL, 
LINE:	3	VALUE:	+		TOKEN:	T_OP_ADD, 
LINE:	3	VALUE:	-		TOKEN:	T_OP_SUB, 
LINE:	3	VALUE:	*		TOKEN:	T_OP_MUL, 
LINE:	3	VALUE:	/		TOKEN:	T_OP_DIV, 
LINE:	4	VALUE:	=		TOKEN:	T_OP_ASSIGN_EQUAL, 
LINE:	4	VALUE:	and		TOKEN:	T_LOGICAL_AND, 
LINE:	4	VALUE:	or		TOKEN:	T_LOGICAL_OR, 
LINE:	4	VALUE:	not		TOKEN:	T_LOGICAL_NOT, 
LINE:	5	VALUE:	(		TOKEN:	T_DEL_R_LPAREN, 
LINE:	5	VALUE:	)		TOKEN:	T_DEL_R_RPAREN, 
LINE:	5	VALUE:	[		TOKEN:	T_DEL_S_LPAREN, 
LINE:	5	VALUE:	]		TOKEN:	T_DEL_S_RPAREN, 
LINE:	5	VALUE:	{		TOKEN:	T_DEL_C_LPAREN, 
LINE:	5	VALUE:	}		TOKEN:	T_DEL_C_RPAREN, 
LINE:	6	VALUE:	;		TOKEN:	T_DEL_SEMICOLON, 
LINE:	6	VALUE:	,		TOKEN:	T_DEL_COMMA, 
LINE:	6	VALUE:	.		TOKEN:	T_DEL_DOT]
